'use strict';

var request = require('../lib/request');
var http = require('http');
var sinon = require('sinon');
var sandbox;

describe('request', function () {
  beforeEach(function () {
    sandbox = sinon.sandbox.create();
  });

  afterEach(function () {
    sandbox.restore();
  });

  it('should make a request to Dribbble API', function () {
    var spy = sandbox.spy(http, 'request');
    var promise = request('/players/1');

    return promise.then(function () {
      spy.should.be.called;
      spy.args[0][0].path.should.contain('/players/1');
    });
  });

  it('should support pagination', function () {
    var spy = sandbox.spy(http, 'request');
    var promise = request('/players/1', { page: 5, per_page: 30});

    return promise.then(function () {
      spy.should.be.called;
      spy.args[0][0].path.should.contain('page=5');
      spy.args[0][0].path.should.contain('per_page=30');
    });
  });

  it('should should start the request after `then`, `done,` `catch`, or `finally` is called', function () {
    var spy = sandbox.spy(http, 'request');
    var promise = request('/players/1');
    spy.should.not.be.called;

    return promise.then(function () {
      spy.should.be.called;
    });
  });

  it('should be start the request once', function () {
    var spy = sandbox.spy(http, 'request');
    return request('/players/1').then().done(function () {
      spy.should.be.calledOnce;
    });
  });

  it('should reject promise if the request failed', function (done) {
    request('/error').should.be.rejected.and.notify(done);
  });
});
